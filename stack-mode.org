#+Title: Stack Exchange Mode for Emacs: Implementation
#+Author: Sean Allred
#+Date: [2013-02-28 Thu]

#+INFOJS_OPT: view:info toc:nil

# This line inhibits Org-Mode from inserting code block execution
# results into the buffer.  Comment it out if you want this
# functionality.
#+PROPERTY results silent

# This line inhibits Org-Mode Babel from expanding noweb-style
# references into /exported/ output.  Note that these references will
# still be expanded during execution and entanglement (and necessarily
# so).
#+PROPERTY noweb strip-export

* About This Document
This document is largely incomplete.  All information is more than
subject to change.  As GitHub's =org-mode= parsing is currently
broken, it is advised that you view this document locally.

You've probably noticed that this document is rather large.  The users
of this package are more than likely to make their own customizations
(because come on---you're using Emacs and you're on some Stack site).
Thus, literate programming is the best methodology that I could see to
create this work.  The Org-mode contributors are hard at work refining
the TEXI exporter; by the time Stack-mode is finished, the exporter
should be as well.  Single-sourcing at its finest.

With this comes a minor something of interest: /how do I get my
files?/ Right now, you'll need to create a directory (as a sibling to
this file) called =elisp/=.  Once you have done that, run =M-x
org-babel-tangle= on this file; the necessary ELisp files will be
generated under =elisp/=.
* TODO Goals
** Provide a full-featured, Emacs-based Stack Exchange experience.
This package must take reasonably full advantage of the Stack Exchange
API to the extent supported by Stack Exchange.  Note there are many
features in this document which are expressly not supported by the
current Stack Exchange API at the time of writing (2.1, [2013-03-02]).
They are based upon the foreseeable interactions a user will have with
any given Stack Exchange site, and are included to ensure that the
interface is consistent.
*** Main Features
- Read
  - browse the stack exchange network
  - browse questions on a specific stack exchange site
  - save questions for offline access
- Write 
  - comment on questions and answers
- Miscellaneous
  - create solutions for questions (can't post as of API 2.1)
  - save draft solutions (in emacs directory)
** Provide offline access to user-specified questions and answers.
There must be no requirement to be on a network in order to use this
package to its fullest.
*** TODO comment on archived nodes?
** Uphold the rights of the user to easily modify this package.
This package must make every effort to explain its methodologies and
algorithms.  It must explain its variables and hooks, and how to
customize them in a way that is useful to Stack Mode in its normal
execution.
* TODO Conventions and Terminology
** Code Conventions
- All functions will have `stack-network-` / `stack-comment-` /
  etc. (as appropriate) as a prefix.

- Functions which must alter the mode the user ends up in will be
  further prefixed with `do-` as to flag its impact.

- Functions with no arguments will effect its lack thereof with =()=,
  not =nil=.  While =()= is /precisely/ the same as =nil= in Lisp (and
  more specifically, Emacs Lisp), it is convention do this.  Failure
  to follow this convention may needlessly confuse potential
  contributors.

** Document Conventions
- When referring to a function using =a teletype font= and the first
  character is a dash, apply the appropriate prefix,
  e.g. =-do-enter-site= --> =stack-network-do-enter-site=.  It becomes
  tedious to read (not to mention to write!) these functions and
  variables involved in the same package/section so repetitively.

- When explaining a snippet of code, the related code block must be
  directly beneath or above the explanation.  Blank lines should only
  be used to make logical distinctions in the document.
  - except in special circumstances, like key-map code.

- In the interest of literate programming, =noweb= syntax is used
  throughout this document.  While detailed organizations may vary
  greatly, I hope to have some consistency in the organization of this
  document.  As such, I wish to define a single format for the various
  major modes:
  1) Require dependencies
  2) Setup customization
  3) Setup key-map
  4) Define navigation
  5) Define special functions
  6) Provide Major Mode
** Terminology of Emacs Lisp
It is expected that the reader has a basic knowledge of Lisp in
general.  However, there are more than a few terms in this document
which are particularly important to Emacs Lisp programming, and are a
bit of research to find adequate definitions for.

While there are myriad functions and symbols specific to Emacs Lisp
programming, these functions are far better documented in Emacs' own
'Info' system.  Place point on a symbol you'd like to learn about and
use =C-h f= or =C-c v= (for functions or variables, respectively) to
find out more.  (Hint: it even works in this very document!)

- a-list :: Association list.  A list of conses, usually pairing a
            symbol with a description or action.
- font-lock :: (also font lock) Commonly known as just /font/, this is
               the face of certain pieces of text on the screen.  Note
               that this information is not stored in the buffer, but
               as Emacs Lisp expressions (usually a-lists of =(regexp
               . font)=)

** Examples
Example questions and answers are taken from [[http://tex.stackexchange.com/questions/83970/auctex-preview-latex-and-ghostscript-emacs][one of my own questions]]
retrieved [2013-02-27 Wed 15:36] unless obviously staged.
* Overview
Stack Exchange Mode (=stack-mode=) is a comprehensive collection of
Emacs major (and minor) modes used to browse the Stack Exchange
network of sites using their official API (in version 2.1, at the
time of writing).  To this end, there are several major modes
included:

- Stack :: The entry point of the entire package.
- Network :: Browses the network of sites.
- Question Browse :: Browses the questions of a particular site.
- Question Detail :: Views one question and related information.
  - Answer :: Minor mode to answer a question
  - Comment :: Minor mode for commenting on questions and answers.
- Ask :: Asks a question.
- Inbox :: Views notifications and other inbox items.

All of these modes interact with each other in various ways.  Many
times these ways closely mimic the website---other times they take
full advantage of Emacs' productive atmosphere to provide otherwise
unrealistic conveniences.[fn:overview-potential-feature] They are
complex beasts, but all of them have the same basic underlying
structure:

1. Require dependencies.
2. Define customizable variables.
3. Create keymappings.
4. Define functions.
5. Provide feature.

Even as this basic layout will always apply, each mode does indeed
have its own peculiarities and complexities to account for, and such
accounting is done in the following sections.

* TODO Utilities
  :PROPERTIES:
  :tangle:   ./elisp/stack-util.el
  :END:
Common functions 'missing' from Elisp
#+BEGIN_SRC elisp
  (defun stack-util/filter (condp list)
    (delq nil
          (mapcar (lambda (x) (funcall condp x)) list)))
#+END_SRC
* TODO Stack Mode (Entry Point): =stack-mode=
  :PROPERTIES:
  :tangle:   ./elisp/stack.el
  :END:
Stack mode is /the/ major mode.  What do I mean by this?  Stack mode
is the entry point of the whole package.  There is no other way to
obtain the full, original functionality of the package without first
running =M-x stack-mode=.  Stack Mode is the only mode available
interactively.  It is a dispatcher that decides, based on user
preferences, how the whole system shall behave.  It provides the basic
framework upon which the rest of the package is built, and makes sure
all tools are available.

#+name: build-stack-mode
#+begin_src emacs-lisp :tangle elisp/stack.el
  ;; stack.el starts here
  
  <<stack-require-dependencies>>
  <<stack-setup-customization>>
  <<stack-setup-keymap>>
  <<stack-setup-api>>
  <<stack-load-children>>
  
  (provide 'stack)
  
  ; stack.el ends here
#+end_src

Thus, there are a few packages that it itself requires.

JSON (JavaScript Object Notation) is the standard by which we
communicate with Stack Exchange itself.  The details of this
communication has [[id:DC2032C5-BC11-47E2-8DDB-34467C2BC479][already been discussed]] so I will not repeat myself
here.  The JSON package provides many utilities for manipulating JSON
snippets within Emacs Lisp, and is required for the operation of this
package.  =json.el= is included with Emacs 24+ (and can easily be
obtained from the ELPA if missing).
#+name: stack-require-dependencies
#+begin_src emacs-lisp
  (require 'json)
#+end_src

This package also requires =request.el=, a package designed to
simplify making HTTP requests.  =request.el= was written by [[http://stackoverflow.com/users/727827][SX@tkf]] and
is maintained and documented on [[http://tkf.github.com/emacs-request/manual.html][GitHub]]. The package is also available
for automatic install via MELPA.
#+name: stack-require-dependencies
#+begin_src emacs-lisp
  (require 'request)
#+end_src

Simply put, =defgroup= defines a customization group for the graphical
interface within Emacs.  Since it pulls all of the customizable
settings together and how to customize them, it is also useful as a
'word bank' of sorts for customizing the package manually.  Every
customizable variable in the entire package is listed here.
#+name: stack-setup-customization
#+begin_src emacs-lisp
    (defgroup stack-exchange
      nil
      "Stack Exchange mode."
      :group 'environment)
#+end_src

Every mode needs a hook, so we here define one.  This hook is run
/after/ stack-mode is finished loading (when called interactively or
from Emacs Lisp).
#+name: stack-setup-customization
#+begin_src emacs-lisp
  (defvar stack-mode-hook nil)
#+end_src

In addition to a hook, most if not all major modes define their own
key-map.  Stack mode as a whole is no exception, but remembering the
nature of =stack-mode= as a dispatcher, a key-map seems out of place
here.  As such, the official key-map for =stack-mode= defines all keys
to be =nil= except those that are necessary for the smooth use of
Emacs as an operating system.  Such necessary keystrokes include
=C-g=, =M-x=, and others.
#+name: stack-setup-keymap
#+begin_src emacs-lisp
  (defvar stack-mode-map
    (let ((map (make-sparse-keymap)))
      map)
    "Keymap for Stack Exchange major mode.  This keymap is not
    used.")
#+end_src

All that is left to do now is to define each customizable variable and
load all of the child modes.  We will define the variables later, and
they will be placed in this file.  We do this via =require=.
#+name: stack-load-children
#+begin_src emacs-lisp
  (require 'stack-network)
#+end_src

We are done here, and =stack-mode= is provided to the user.
#+name: provide-stack-mode
#+begin_src emacs-lisp
  (provide 'stack)
#+end_src

For features that require unsupported write access, the message shall
be displayed: "Version <API-version> of the Stack Exchange API does
not support this action."  The functions shall exist (along with their
key-maps), but the functionality will be replaced by the display of
such a message.

When I say minor mode, I may mean a major mode mostly based off of
another mode, as these functions don't make any sense in any other
context.

At all times, the percentage of API requests left can be displayed in
the mode line according to the customizable variable (=nil= or =t=)
=stack-display-API-requests-in-mode-line= and shall turn red (if
activated) when use exceeds =stack-display-API-color-threshold= (a
float in $[0, 1]$, where $0$ never changes the color).

Auxiliary files (the list of favorite sites, saved questions, ...) are
stored in the =stack-directory=.  This variable defaults to a
directory within the user's emacs directory.

#+NAME: stack-setup-customization
#+BEGIN_SRC elisp
  (defvar stack-directory
    (concat user-emacs-directory "stack-mode/")
    "The directory containing all auxiliary files related to
  `STACK-MODE'.")
#+END_SRC

* TODO Network Mode: =stack-network-mode=
  :PROPERTIES:
  :tangle:   ./elisp/stack-network.el
  :END:
** Overview
Network mode is a major mode that defines functions and binds keys
useful for browsing and organizing sites in the Stack Exchange
network.
#+name: build-network-mode
#+begin_src emacs-lisp :tangle "elisp/stack-network.el"
;; stack-network.el starts here

<<network-dependencies>>
<<network-customization>>
<<network-keymap>>
<<network-define-mode-functions>>
<<provide-network-mode>>

;; stack-network.el ends here
#+end_src
** Dependencies
Since it is an integrated part of =stack-mode= and dispatches to
several sibling modes, it is imperative that =stack-mode= (and all of
its child modes) be available upon entering =stack-network-mode=.
#+name: network-dependencies
#+begin_src emacs-lisp
  (require 'stack)
#+end_src

** Interface
Here is the planned interface:

#+begin_src text :tangle elisp/stack-network.interface
  -*- stack-network -*-
  Logged in as Sean
  
    14 unread inbox items
     1 unread notification
  
  Favorites.............................................................
    TeX, LaTeX, and Friends                                          tex
    StackOverflow                                          stackoverflow
    StackApps                                                  stackapps
    Mathematics                                                     math
  
  Other Sites...........................................................
    <all other sites>
#+end_src

But what if the user is not logged in?  In this case, the name is
replaced with =Anonymous=, and the 'unread' counters are replaced
by two question marks:

#+begin_src text :tangle elisp/stack-network-anon.interface
  -*- stack-network -*-
  Logged in as Anonymous
  
    ?? unread inbox items
    ?? unread notifications
  
  Favorites.............................................................
    TeX, LaTeX, and Friends                                          tex
    StackOverflow                                          stackoverflow
    StackApps                                                  stackapps
    Mathematics                                                     math
  
  Other Sites...........................................................
    <all other sites>
#+end_src

Note, however, that favorites are still here.

The width is customizable.
#+name: network-customization
#+begin_src elisp
  (defvar stack-network-site-line-width fill-column
    "The absolute width of each site as listed in Stack Network
  Mode.")
#+end_src

*** Official Requirements
- The interface must represent logged-in status by representing the
  network-wide name of the user or "Anonymous" otherwise.
- The interface must represent the number of unread notifications and
  inbox items (or two question marks if not logged in).
- The interface must provide a *local* mechanism for favoriting sites.
- Each site is listed with its left-flush official title and
  right-flush API token.
*** Retrieval
The information we will need for this screen is as follows:

- [X] The list of 'favorited' sites, if it exists (the file is given
  by =stack-network-favorites-file=, which defaults to =(concat
  stack-directory "favorites.list")=)
- [X] The names and API-tokens of every existing site
- [ ] If logged on
  - [ ] the user's name (as given in the general by StackExchange)
  - [ ] the number of unread notifications
  - [ ] the number of unread inbox items

**** Get Notifications and Inbox Items

**** Get the List of Sites
#+NAME: network-define-mode-functions
#+BEGIN_SRC elisp
  (defun stack-network/site-is-meta (site)
    "Returns non-nil if site is a meta site."
    (equal (cdr (assoc 'site_type site)) "meta_site"))

  (defun stack-network/get-site-list ()
    "Gets the list of all sites in the SE network which are not
  meta."
    (stack-util/filter 
     (lambda (site)
       (if (not (stack-network/site-is-meta site)) site))
     (stack-api/get-items
      (stack-api/request "sites" '((pagesize . "999"))))))
#+END_SRC
**** Prepare Favorites
The favorites list is stored in a separate file in the user's Emacs
directory.  

#+NAME: network-customization
#+BEGIN_SRC elisp
  (defvar stack-network-favorites-file
    (concat stack-directory "favorite-networks.list")
    "The filepath to a whitespace-delimited file of stack_api_tokens
  corresponding to the user's favorite sites.  This variable is used
  by `STACK-NETWORK-MODE' to group the user's favorite sites to the
  top for easy access.")
#+END_SRC

And now, we load the site_api_tokens into a list
=stack-network/favorite-sites= to assist in output later.  Note that
this field shouldn't be directly modified; it is better to modify the
favorites file itself.

First, the function ensures that the file exists.  If it does not
exist, it creates it.
#+NAME: network-define-mode-functions
#+BEGIN_SRC elisp
  (defun make-file (file)
    (shell-command
     (format "copy /Y NUL \"%s\" >NUL"
             (expand-file-name file))))
  
  (defun stack-network/get-favorites ()
    "Gets the list of favorite sites stored in
  `STACK-NETWORK-FAVORITES-FILE'"
    (unless (file-exists-p stack-directory)
      (make-directory stack-directory))
    (unless (file-exists-p stack-network-favorites-file)
      (make-file stack-network-favorites-file))
    (with-temp-buffer
      (insert-file-contents stack-network-favorites-file)
      (split-string (buffer-string))))
  
#+END_SRC
*** Building Strings for Output
Now that we have the data, it's time to build our screen.

**** Get Notifications and Inbox Items

**** The Site List
This one is a little tricky.  In C, one would simply write
#+begin_src c :tangle no
  printf("%s%*s",
         name,
         stack-network-site-fill-width,
         api-key);
#+end_src
to create the desired effect.  Unfortunately, =format= isn't this
intelligent.  So, the format string is created that has the correct
width, and then this format string is used in the 'real' format
string for return.
#+name: network-define-mode-functions
#+begin_src elisp
  (defun stack-network/make-site-string (name api-key)
    "Creates a string from `NAME` and `API-KEY` that exactly fills
    the width given by `STACK-NETWORK-SITE-FILL-WIDTH`.  This
    function is used in the construction of the interface."
    (format (format "%%s%%%ds" 
                    (- stack-network-site-line-width (length name)))
            name api-key))
#+end_src

Now that we can easily create /one/ site, it is a simple scaling
upward to create them all.  The following function uses =mapconcat= to
concatenate the applications of =stack-network/make-site-string= to
each site in the argument (given as a sequence).  The concatenation
is made by joining each application with a delimiter, in this case a
new line.  This function returns a block of text ready to be inserted
into a buffer.
#+NAME: network-define-mode-functions
#+BEGIN_SRC elisp
  (defun stack-network/make-site-list (sites)
    "Formats `SITES` to be displayed onscreen in the network browser."
  
    (mapconcat (lambda (site)
                 (stack-network/make-site-string
                  (cdr (assoc 'name site))
                  (cdr (assoc 'api_site_parameter site))))
               sites
               "\n"))
#+END_SRC

Thus, a complete list can be built by requesting all sites through
=stack-api/request=, using =stack-api/get-items= to focus in on the
items (where each item is a =site= object, according to the
documentation), and then passing this list of sites to
=stack-network/make-site-list=. 
#+BEGIN_EXAMPLE
  (stack-network/make-site-list
   (stack-network/get-site-list))
#+END_EXAMPLE

Of course, this is not its use case.  In reality, we separate the
sites into favorites and non-favorites.  We have already [[*Prepare%20Favorites][prepared the
list of favorite sites]], so all we have to do is print each group
out.  This is covered in detail in the next sections.
***** Favorites

***** Others

*** Output to Screen
** Customization
A mode hook is provided for customizability.  I am not sure that this
hook is automatically run or not per =special-mode=. (TODO)
#+name: network-customization
#+begin_src emacs-lisp
  (defvar stack-network-mode-hook nil)
#+end_src

** Default Key-map

- n :: next site
- p :: previous site
- RET :: enter site into [[*Question%20Browse%20Mode:%20%3Dstack-question-browse-mode%3D][Question Browse Mode]]
- u :: profile summary (stack-profile-mode ?)
- C-u u :: profile summary for user
- i :: goto [[*Inbox%20Mode:%20%3Dstack-inbox-mode%3D][Inbox Mode]]
- , :: reorder: move site up
- . :: reorder: move site down
- j :: jump to bookmarked sites
- C-m :: (RET)
- o ::  enter site into [[*Question%20Browse%20Mode:%20%3Dstack-question-browse-mode%3D][Question Browse Mode]]
- b :: toggle bookmark
- C-i :: display site details

#+name: network-keymap
#+begin_src emacs-lisp
  (defvar stack-network-mode-map
    (let ((map (make-keymap)))
      (define-key map "n"     'stack-network-next-site)
      (define-key map "p"     'stack-network-previous-site)
      (define-key map ","     'stack-network-move-site-up)
      (define-key map "."     'stack-network-move-site-down)
      (define-key map "j"     'stack-network-jump-to-bookmarks)
      (define-key map "\C-m"  'stack-network-do-enter-site) ; ret
      (define-key map "o"     'stack-network-do-enter-site)
      (define-key map "u"     'stack-network-do-profile-summary)
      (define-key map "\C-uu" 'stack-network-do-profile-summary-for-user)
      (define-key map "i"     'stack-network-do-inbox)
      (define-key map "b"     'stack-network-toggle-bookmark)
      (define-key map "\C-i"  'stack-network-display-details) ; tab
      map)
    "Keymap for Stack Exchange: Network Browser major mode")
#+end_src
*** TODO (re?)create interface for site details
** Navigation
The primary methods of navigation =-next-site=, =-previous-site=, and
=-do-enter-site=.  The first two of these three do only what makes sense:
they move point up and down the list of available sites.
#+name: network-define-mode-functions
#+begin_src emacs-lisp
  (defun stack-network-next-site ()
    "Move to the next site in the list."
    (interactive)
    (stack-network-debug "in next site")
    (next-line))
  
  (defun stack-network-previous-site ()
    "Move to the previous site in the list."
    (interactive)
    (stack-network-debug "in prev site")
    (previous-line))
  
  (defun stack-network-do-enter-site ()
    "Enter the site at point in another buffer."
    (interactive)
    (message "I have no idea what I'm doing")
    (stack-exchange-browse-questions
     (stack-network-get-site-under-point)))
#+end_src

If you look at the definition of =-do-enter-site=, you will notice that
the heretofore undefined =-get-site-under-point= is used.  As you may
have guessed, the purpose of this function is to obtain the 'string
representation' of the Stack Exchange site upon which point currently
rests.  
** Other Functions
=stack-save= gets the ID of the question under point and stores
it as an Org node:

#+begin_src org :tangle no
  ,* tex.stackexchange.com
  ,  :PROPERTIES:
  ,  :STACK_API_TOKEN: tex
  ,  :STACK_URL: http://tex.stackexchange.com
  ,  :END:
  
  ,** COMMENT
  ,What should the header be?
  ,- tex.stackexchange.com
  ,- tex (api token)
  ,- TeX, LaTeX, and Friends (the default text)
  ,  - a problem if it changes
  ,- TeXpertexchange.com (the customized text)
  ,  - which could also easily change
  ,** Example question
  ,:PROPERTIES:
  ,:STACK_ID: 1234567
  ,:STACK_SCORE: 12
  ,:STACK_AUTHOR: 12345 (vermiculus)
  ,:STACK_ASK_TIME: [2013-03-02 Sat 10:43]
  ,:STACK_LAST_EDIT: [2013-03-02 Sat 10:44]
  ,:STACK_LAST_EDITOR: 12345 (vermiculus)
  ,:STACK_WIKI: false
  ,:STACK_URL: http://tex.stackexchange.com/q/123456
  ,:END:
  ,Question body.  (Stored as Markdown, not org.  They do not have the
  ,same feature set, and I'd rather not convert that as well.)
  ,*** Comments
  ,**** egreg
  ,:PROPERTIES:
  ,:STACK_ID: do comments have IDs?
  ,:STACK_SCORE: 3
  ,:STACK_AUTHOR: 54321 (egreg)
  ,:STACK_COMMENT_TIME: [2013-03-02 Sat 10:43]
  ,:STACK_LAST_EDIT: [2013-03-02 Sat 10:44]
  ,:END:
  ,@vermiculus, that's not a question.
  ,**** vermiculus
  ,:PROPERTIES:
  ,:STACK_ID: do comments have IDs?
  ,:STACK_SCORE: 3
  ,:STACK_AUTHOR: 54321 (egreg)
  ,:STACK_COMMENT_TIME: [2013-03-02 Sat 10:43]
  ,:STACK_LAST_EDIT: [2013-03-02 Sat 10:44]
  ,:END:
  ,@egreg, that's not a comment!  Wait - damn.
  ,*** Answers
  ,**** egreg
  ,:PROPERTIES:
  ,:STACK_ID: 12345678
  ,:STACK_SCORE: 125
  ,:STACK_AUTHOR: 54321 (egreg)
  ,:STACK_ANSWER_TIME: [2013-03-02 Sat 11:43]
  ,:STACK_LAST_EDIT: [2013-03-02 Sat 11:44]
  ,:STACK_LAST_EDITOR: 54321 (egreg)
  ,:STACK_WIKI: true
  ,:STACK_URL: http://tex.stackexchange.com/q/123456/a/12345678
  ,:END:
  ,Answer body (stored as Markdown).  I'm egreg and I'm awesome.  I've
  ,got more internet money than actual money.  Here's a community wiki.
  ,**** tohecz
  ,:PROPERTIES:
  ,:STACK_ID: 12345679
  ,:STACK_SCORE: -5
  ,:STACK_AUTHOR: 67890 (tohecz)
  ,:STACK_ANSWER_TIME: [2013-03-02 Sat 10:50]
  ,:STACK_LAST_EDIT: [2013-03-02 Sat 11:00]
  ,:STACK_LAST_EDITOR: 67890 (tohecz)
  ,:STACK_WIKI: false
  ,:STACK_URL: http://tex.stackexchange.com/q/123456/a/12345679
  ,:END:
  ,Why use Emacs?  Geez.  TeXMaker ftw!
#+end_src

=stack-view-saved= switches to non-networked mode.  That is, all
questions available to be seen and browsed are those saved in
=.emacs.d/.stack-mode/saved.org=.  This 'mode' does not require
Emacs to create or sustain any sort of network connection.

This is an important feature of Stack Mode.  Without offline access to
information, it loses a great deal of its appeal.
** Conclusion
Network mode is the highest-level mode available within =stack-mode=.
Its primary purpose is to be a dispatcher for other commands.  Since
many users reside on exactly one Stack Exchange site, =stack-mode=
should be configurable to support this.

#+name: provide-network-mode
#+begin_src emacs-lisp
  (define-derived-mode stack-network-mode
    special-mode
    "SE/NW"
    "Major mode for navigating and organizing sites on the Stack
  Exchange Network.")

  (provide 'stack-network)
#+end_src
* TODO Question Browse Mode: =stack-question-browse-mode=
  :PROPERTIES:
  :tangle:   ./elisp/stack-question-browse.el
  :END:
This mode is buffer-read-only.

Font Lock
 - green :: answered question
 - bold red :: open bounty
 - bold :: unanswered

Sorting and Filtering
- should be able to sort

Question starring, dispatcher-y feel, similar to network mode.

Display statistical information on top:
 - if point is on a question, display the user who asked it, their
   reputation, the last reviser, their reputation, tags, views,
   answers, accept status, and votes.

#+begin_src text :tangle "elisp/question-browse.interface"
  Full title: AUCTeX, preview-latex, and Ghostscript (Emacs)
       Asker: vermiculus (572)                            Bounty:  50
     Answers:  1 (Accepted)            Active: [2013-02-27 Wed 15:44]
        Tags: emacs auctex preview ghostscript
#+end_src

 - if point is not on a question, display site trends in general

#+begin_example
        Site: TeX, LaTeX, and Friends
       Users: 400
  Unanswered: 15 (0.003)
#+end_example

   - number of users who have 200 rep or more
   - the number beside unanswered is a float in [0, 1]
     - 0 :: all questions are answered
     - 1 :: no questions are answered

** Default Key-map
 - n :: next question (move point down)
 - p :: previous question
 - RET :: enter question ([[*Question%20Detail%20Mode:%20%3Dstack-question-detail-mode%3D][Question Detail Mode]])
 - s :: star a question
 - S :: save question
 - A :: ask question ([[*Ask%20Mode:%20%3Dstack-ask-mode%3D][Ask Mode]])
 - q :: go back to [[*Network%20Mode:%20%3Dstack-network-mode%3D][Network Mode]]
 - m :: switch to meta
* TODO Question Detail Mode: =stack-question-detail-mode=
  :PROPERTIES:
  :tangle:   ./elisp/stack-question-detail.el
  :END:

Outline-mode-like question voting, comment voting/flagging

This mode is buffer-read-only.

The question and each answer are top-level nodes.

** Default Key-map

- = :: upvote question/answer/comment
- - :: downvote question/answer
- f :: flag question/answer/comment
- s :: star
- S :: save offline as an =org= node.  (The archive file is kept in
       .emacs.d)
* TODO Comment Mode: =stack-comment-mode=
  :PROPERTIES:
  :tangle:   ./elisp/stack-comment
  :END:

Minor mode for use atop markdown-mode.

Valid for Questions and Answers; just a small window that would open
up below in comment-mode.  Should support mentions.

** Default Key-map

- C-c C-c :: Commit comment.
- C-c C-k :: Cancel comment.
- TAB :: Expand username, if possible (must be after =@=) with
         preference to those nearest in the conversation
* TODO Ask Mode: =stack-ask-mode=

A minor mode atop =markdown-mode=, adding support for tagging.

Ask a question.
* TODO Inbox Mode: =stack-inbox-mode=
yeah.  View notifications and stuff.

* Footnotes

[fn:overview-potential-feature] One example that comes to mind is a
minor mode within question browsing such that another buffer 'follows'
the question point, well, points to.  Org-Agenda users will know what
I'm talking about.
