-*- mode: lisp-interaction -*-

(require 'json)
(require 'request)

(defvar stack-time-format-string
  "[%Y-%m-%d %a %H:%M:%S]")
(defun stack-make-time (epoch-time)
  (format-time-string stack-time-format-string (seconds-to-time epoch-time)))

(setq stack-api-sites nil)

(defun stack-api-find-all-sites ()
  (request
   "https://api.stackexchange.com/2.1/sites"
   :parser 'json-read
   :success (function*
	     (lambda (&key data &allow-other-keys)
	      (setq stack-api/cache/sites (assoc-default 'items data))))))

(stack-api-find-all-sites)

(message "%S" (elt stack-api/cache/sites 0))

(mapcar (lambda (site)
	  (message "Name: %s"                  (assoc-default 'name site))
;	  (message "\tHiRes Icon URL:      %s" (assoc-default 'high_resolution_icon_url site))
;	  (message "\tMarkdown Extensions: %S" (assoc-default 'markdown_extensions      site))
;	  (message "\tRelated sites:       %S" (assoc-default 'related_sites            site))
;	  (message "\tFavicon URL:         %s" (assoc-default 'favicon_url              site))
;	  (if (assoc-default 'launch_date site) (message "\tLaunch Date:         %s" (stack-make-time (assoc-default 'launch_date site))))
;	  (message "\tStyling:             %S" (assoc-default 'styling                  site))
	  (message "\tSite State:          %s" (assoc-default 'site_state               site))
;	  (message "\tAliases:             %S" (assoc-default 'aliases                  site))
;	  (message "\tIcon URL:            %s" (assoc-default 'icon_url                 site))
;	  (message "\tAudience:            %s" (assoc-default 'audience                 site))
;	  (message "\tSite URL:            %s" (assoc-default 'site_url                 site))
;	  (message "\tLogo URL:            %s" (assoc-default 'logo_url                 site))
;	  (message "\tSite Type:           %s" (assoc-default 'site_type                site))
	  (message "\tAPI Site Parameter:  %s" (assoc-default 'api_site_parameter       site)))
	stack-api/cache/sites)

(mapcar (lambda (site)
	  (if (not (string= "linked_meta" (assoc-default 'site_state site)))
	      (message "Site: %s (%s)"
		       (assoc-default 'name site)
		       (assoc-default 'api_site_parameter site))))
	  stack-api/cache/sites)

(defun stack-api/method (method)
  (concat "https://api.stackexchange.com/" method))


(defun stack-api/site-is-meta (site)
  (string= "meta_site" (assoc-default 'site_type site)))



(defun stack-network/write-out-site (site)
  (with-current-buffer (get-buffer-create "*SX Network*")
    (insert (format "%-40s %29s\n"
		    (assoc-default 'name site)
		    (assoc-default 'api_site_parameter site)))))

(defun stack-network/write-out-sites ()
  (if (not stack-api/cache/sites)
      (stack-api/request-site-overview))
  (mapcar (lambda (site) 
	    (if (not (stack-api/site-is-meta site))
		(stack-network/write-out-site site)))
	  stack-api/cache/sites))

(stack-network-write-out-sites)

(with-current-buffer (get-buffer-create "*SX Network*")
  (insert "Hello World"))

(defconst stack-util/html-links2org-links-regexp
  "<a href=\"\\(\\(?:https?://\\)?[A-Za-z0-9-/\.]+\\)\">\\(.*\\)</a>"
  "Matches a single HTML anchor (<a href...>...</a>) and groups
  it into target and display.")

(defun stack-util/html-links2org-links ()
  "Converts HTML tags in the buffer (as specified by
`stack-util/html-links2org-links-regexp') into Org-style links."
  (goto-char 1)
  (while (search-forward-regexp stack-util/html-links2org-links-regexp nil t)
    (replace-match (concat "[[" (match-string 1) "][" (match-string 2) "]]") t nil)))

(makunbound stack-util/html-links2org-links-regexp)
