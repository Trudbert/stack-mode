#+Title: Stack Exchange API
#+Author: Sean Allred
#+Date: [2014-01-06 Mon]
#+MACRO: version 2.1

#+begin_src emacs-lisp :exports none :tangle no
  (substring (shell-command-to-string "git rev-parse --short HEAD") 0 -1)
#+end_src

* Introduction
The purpose of this package is to create an interaction between Emacs
Lisp and the Stack Exchange API.  I anticipate that no function herein
has side-effects; all side-effects should be implemented in a package
that uses these utilities (such as =stack-mode.el=).

This document interacts with version {{{version}}} of the
StackExchange API and is maintained by {{{author}}}.  It was last
modified at {{{modification-time(%Y-%m-%dT%T%z)}}} (commit ??).  This
copy was exported on {{{time(%Y-%m-%dT%T%z)}}}.

The Stack Exchange API allows for read-only access (and write-access
for comments!) to the Stack Exchange network, and uses JSON as its
main method of communication.

* Implementation
:PROPERTIES:
:ID:       64762972-C0A4-4FD9-BF3D-1265B6153017
:tangle:   ./elisp/stack-api.el
:noweb:    tangle
:comments: both
:mkdirp:   yes
:END:
#+begin_src emacs-lisp
  ;; stack-api.el begins here
#+end_src

** Dependencies
:PROPERTIES:
:ID:       B83AB9CF-CED7-4D2C-B302-71DF468B2243
:END:
*** Request
:PROPERTIES:
:ID:       A8354E7D-A0D1-4860-93E5-1865DC334295
:END:
=require.el= is required to [[id:BB12F389-29D9-44D2-9570-1060EFAB9C8D][retrieve information]].
#+BEGIN_SRC emacs-lisp
  (require 'request)
#+END_SRC
*** JSON
:PROPERTIES:
:ID:       C0CAD878-AB06-47AE-9DBE-C63B4669EB88
:END:
=json.el= is required to [[id:BB12F389-29D9-44D2-9570-1060EFAB9C8D][parse information]].
#+begin_src emacs-lisp
  (require 'json)
#+end_src
** Constants
:PROPERTIES:
:ID:       13149270-D355-4C9F-8B28-887894405602
:END:
We define the API version:
#+begin_src emacs-lisp
  (defconst stack-api/root "api.stackexchange.com/2.1/"
    "The root for API calls.")
#+end_src
** Variables
:PROPERTIES:
:ID:       5A2AF616-EC47-4911-9ABF-60C59471A901
:END:
This variable declares the format off a time string.  The format has
been designed to be compatible with Org-mode time-stamps, for whatever
purpose that may come in handy for.
#+begin_src emacs-lisp
  (defvar stack-time-format-string
    "[%Y-%m-%d %a %H:%M:%S]")
#+end_src
** Supporting Utilitarian Functions
:PROPERTIES:
:ID:       B780B444-1A08-4B04-805E-6FFB1C87652C
:END:
This function takes the time `EPOCH-TIME` and formats it into a string
according to `STACK-FORMAT-TIME-STRING`.
#+begin_src emacs-lisp
  (defun stack-make-time (epoch-time)
    (format-time-string stack-time-format-string (seconds-to-time epoch-time)))
#+end_src

Converts the key-value pairs of an association list into the
equivalent JSON format.
#+begin_example
LISP> (alist-to-json '(("page" 2) ("site" "tex")))
"page=2&site=tex&"
#+end_example

#+begin_src emacs-lisp
  (defun alist-to-json (alist)
    "Converts the key-value pairs of `ALIST` into a JSON-friendly
  string: \"key1=value1&key2=value2&\"."
    (apply 'concat
           (mapcar (lambda (kv)
                     (format "%s=%s&" (car kv)
                             (if (stringp (cdr kv)) 
                                 (cdr kv)
                               (number-to-string (cdr kv)))))
                   alist)))
#+end_src
** Authentication
:PROPERTIES:
:END:
https://api.stackexchange.com/docs/authentication
** Information Retrieval
:PROPERTIES:
:ID:       BB12F389-29D9-44D2-9570-1060EFAB9C8D
:END:
The most basic use of the API is to retrieve information.  With the
StackExchange API, such requests are answered with JSON, so we shall
require both the [[id:C0CAD878-AB06-47AE-9DBE-C63B4669EB88][JSON package]] and the [[id:A8354E7D-A0D1-4860-93E5-1865DC334295][REQUEST package]], available via
your favorite package repository.

Using the [[id:A8354E7D-A0D1-4860-93E5-1865DC334295][REQUEST package]], we make a generalized 'requesting' function
tailored to the Stack Exchange API.  In order to ease the requests
that =stack-mode= will make, this function takes a single =call= (such
as "sites" or "sites/info") and an optional list of parameters.
#+begin_src emacs-lisp
  (defun stack-api/request (call &optional keys-alist)
    "Makes the specified CALL to the Stack Exchange API with the
  key-value pairs given KEYS-ALIST.  For example,
  
    (stack-api/request \"sites\" '((page . 2) (page_size . 25)))"
    
    (request (concat stack-api/root call)
             :params keys-alist
             :parser 'json-read
             :sync t
             :success (lambda (&rest arguments)
                        <<parse arguments>>))
    stack-api/request/return)
#+end_src

#+begin_src emacs-lisp :noweb-ref parse arguments
  (setq stack-api/request/return (plist-get arguments :data))
#+end_src

#+begin_src
  (defun stack-api/get-items (json-object)
    "Retrieves the `ITEMS` portion of the `JSON-OBJECT` (as
  returned by `STACK-API/REQUEST`)."
    (cdr (cadddr json-object)))
#+end_src
** Classes
:PROPERTIES:
:ID:       F45B5F88-F702-4599-8ED3-8D301DC52A5E
:END:

Since we are dealing with data that maintains a specific form (and we
are even receiving it as such via JSON), it makes sense to create
objects for the major concepts of the API.  Intelligent structures are
provided by the Common Lisp library.
#+begin_src elisp
  (require 'cl)
#+end_src
*** TODO Special Constructors
:PROPERTIES:
:ID:       4E58C892-2D40-439D-A48E-F8DF315E5984
:END:
See [[info:cl#Structures]].  Should we be making the optional arguments
keyed and have the 'mandatory' ones not be using the special
constructor syntax?

#+begin_src emacs-lisp :tangle no
  (defstruct (stack-api/eh
    (:constructor nil)
    (:constructor stack-api/make-eh
                  (required arguments here
                   &key
                   optional parameters later)))
    required
    arguments
    here
    optional
    parameters
    later)
#+end_src

*** DONE Site
:PROPERTIES:
:ID:       C900BC70-BFD2-4553-B56E-4003CDB2655C
:END:
[[http://api.stackexchange.com/docs/types/site][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/site
    "This type represents a site in the Stack Exchange network."
  
    (api-site-parameter       nil :type string)
    (audience                 nil :type string)
    (favicon-url              nil :type string)
    (icon-url                 nil :type string)
    (launch-date              nil :type integer)
    (logo-url                 nil :type string)
    (name                     nil :type string)
    (site-state               nil :type (memq 'normal
                                              'closed-beta
                                              'open-beta
                                              'linked-meta))
    (site-type                nil :type (memq 'main-site
                                              'meta-site)) ; but new options may be added.
    (site-url                 nil :type string)
    (styling                  nil :type styling)
  
    (open-beta-date           nil :type date)
    (related-sites            nil :type (list related-sites))
    (markdown-extensions      nil :type (list (memq 'MathJax
                                                    'Prettify
                                                    'Balsamiq
                                                    'jTab))) ; but new options may be added.
    (high-resolution-icon-url nil :type string)
    (closed-beta-date         nil :type date)
    (aliases                  nil :type (list string)))
#+end_src
*** DONE Related Site
:PROPERTIES:
:ID:       FC08CB5B-FDEF-4955-B58B-8AE7A0072296
:END:
[[http://api.stackexchange.com/docs/types/related-site][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/related-site
    "This type represents a `stack-api/site' that is related in
    some way to another site.  Examples include 'chat and 'meta,
    and 'parent sites.  Applications should be able to gracefully
    handle the additon of new related site types."
    
    (name               nil :type string)
    (relation           nil :type (memq 'parent
                                        'meta
                                        'chat)) ; but new options may be added
    (site-url           nil :type string)
    (api-site-parameter nil :type string))
#+end_src
*** DONE User
:PROPERTIES:
:ID:       2D99C05F-79EC-4FFB-B665-09A510872230
:END:
[[http://api.stackexchange.com/docs/types/user][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/user
    "This type describes a user on a Stack Exchange site.  There
  are a number of different user types returned by the Stack
  Exchange API, depending on the method.  Others include
  `stack-api/shallow-user' and `stack-api/network-user'."
  
    (account-id                nil :type integer)
    (answer-count              nil :type integer)
    (badge-counts              nil :type badge-count)
    (creation-date             nil :type date)
    (display-name              nil :type string)
    (down-vote-count           nil :type integer)
    (is-employee               nil :type boolean)
    (last-access-date          nil :type date)
    (link                      nil :type string) ; unchanged in unsafe filters
    (profile-image             nil :type string) ; unchanged in unsafe filters
    (question-count            nil :type integer)
    (reputation                nil :type integer)
    (reputation-change-day     nil :type integer)
    (reputation-change-month   nil :type integer)
    (reputation-change-quarter nil :type integer)
    (reputation-change-week    nil :type integer)
    (reputation-change-year    nil :type integer)
    (up-vote-count             nil :type integer)
    (user-id                   nil :type integer) ; refers to a user
    (user-type                 nil :type (memq 'unregistered
                                               'registered
                                               'moderator
                                               'does-not-exist))
    (view-count                nil :type integer)
  
    (about-me                  nil :type string) ; unchanged in unsafe filters
    (accept-rate               nil :type integer)
    (age                       nil :type integer)
    (last-modified-date        nil :type date)
    (location                  nil :type string)
    (timed-penalty-date        nil :type date)
    (website-url               nil :type string)) ; unchanged in unsafe filters
#+end_src
*** DONE Shallow User
:PROPERTIES:
:ID:       9E8F7ABA-25F0-47C0-8391-8B031ADF53E6
:END:
[[http://api.stackexchange.com/docs/types/shallow-user][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/shallow-user
    "This type represents a user, but omits many of the fields
    found on the full User type.  This type is mostly analogous to
    the 'user card' found on many pages (like the question page) on
    a Stack Exchange site."
  
    (user-type     nil :type (memq 'unregistered,
                                   'registered,
                                   'moderator,
                                   'does-not-exist))
  
    (user-id       nil :type integer) ; refers to a user
    (reputation    nil :type integer)
    (profile-image nil :type string) ; unchanged in unsafe filters
    (link          nil :type string) ; unchanged in unsafe filters
    (display-name  nil :type string)
    (accept-rate   nil :type integer))
#+end_src
*** DONE Network User
:PROPERTIES:
:ID:       DF345B03-72E0-4836-9C5B-1215578C0029
:END:
[[http://api.stackexchange.com/docs/types/network-user][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/network-api
    "This type represents a user, however it is greatly reduced when
  compared to the full User type to reduce the amount of work that
  needs to be done to fetch it from multiple sites in the network."
  
    (account-id       nil :type integer)
    (answer-count     nil :type integer)
    (badge-counts     nil :type badge-count)
    (creation-date    nil :type date)
    (last-access-date nil :type date)
    (question-count   nil :type integer)
    (reputation       nil :type integer)
    (site-name        nil :type string)
    (site-url         nil :type string)
    (user-id          nil :type integer) ; refers to a user
    (user-type        nil :type (memq 'unregistered
                                      'registered
                                      'moderator
                                      'does-not-exist)))
#+end_src
*** DONE Post
:PROPERTIES:
:ID:       812A7FFE-AABD-467E-B0D4-61294406C30A
:END:
[[http://api.stackexchange.com/docs/types/post][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/post
    "This type represents the intersection of the `stack-api/question' and `stack-api/answer' types.
  
  It's used in cases where it would be beneficial to mix questions
  and answers in a response."
  
    (body               nil :type string) ; unchanged in unsafe filters
    (creation-date      nil :type date)
    (down-vote-count    nil :type integer)
    (last-activity-date nil :type date)
    (link               nil :type string)
    (post-id            nil :type integer) ; refers to a post
    (post-type          nil :type (memq 'question
                                        'answer))
    (score              nil :type integer)
    (up-vote-count      nil :type integer)
  
    (last-edit-date     nil :type date)
    (owner              nil :type shallow-user)
    (comments           nil :type (list comment)))
#+end_src
*** DONE Question
:PROPERTIES:
:ID:       AC1F72BE-06F9-4009-8810-F98DD8CF2109
:END:
[[http://api.stackexchange.com/docs/types/question][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/question
    "This type represents a question on one of the Stack Exchange
  sites, such as this famous RegEx question.  This type is heavily
  inspired by the question page itself, and can optionally return
  `stack-api/comment's and `stack-api/answer's accordingly."
  
    (answer-count         nil :type integer)
    (body                 nil :type string) ; unchanged in unsafe filters
    (close-vote-count     nil :type integer)
    (creation-date        nil :type date)
    (delete-vote-count    nil :type integer)
    (down-vote-count      nil :type integer)
    (favorite-count       nil :type integer)
    (is-answered          nil :type boolean)
    (last-activity-date   nil :type date)
    (link                 nil :type string) ; unchanged in unsafe filters
    (notice               nil :type notice)
    (question-id          nil :type integer) ; refers to a question
    (reopen-vote-count    nil :type integer)
    (score                nil :type integer)
    (tags                 nil :type (list string))
    (title                nil :type string)
    (up-vote-count        nil :type integer)
    (view-count           nil :type integer)
    (last-edit-date       nil :type date)

    (accepted-answer-id   nil :type integer)
    (answers              nil :type (list answer))
    (bounty-amount        nil :type integer)
    (bounty-closes-date   nil :type date)
    (closed-date          nil :type date)
    (closed-reason        nil :type string)
    (comments             nil :type (list comment))
    (community-owned-date nil :type date)
    (protected-date       nil :type date)
    (owner                nil :type shallow-user)
    (migrated-to          nil :type migration-info)
    (migrated-from        nil :type migration-info)
    (locked-date          nil :type date))
#+end_src
*** DONE Answer
:PROPERTIES:
:ID:       EEB22070-55EC-4E83-8DBD-A6FB9EBD69C3
:END:
[[http://api.stackexchange.com/docs/types/answer][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/answer
    "This type represents an answer to a question on one of the
  Stack Exchange sites, such as this famous answer of bobince's.
  As on the question page, it is possible to fetch the
  `stack-api/comment's on an answer as part of a call; though this
  is not done by default."
  
    (answer-id            nil :type integer) ; refers to an answer
    (body                 nil :type string) ; unchanged in unsafe filters
    (creation-date        nil :type date)
    (down-vote-count      nil :type integer)
    (is-accepted          nil :type boolean)
    (last-activity-date   nil :type date)
    (link                 nil :type string) ; unchanged in unsafe filters
    (question-id          nil :type integer) ; refers to a question
    (score                nil :type integer)
    (tags                 nil :type (list string))
    (title                nil :type string)
    (up-vote-count        nil :type integer)

    (owner                nil :type shallow-user)
    (locked-date          nil :type date)
    (last-edit-date       nil :type date)
    (community-owned-date nil :type date)
    (comments             nil :type (list comment)))
#+end_src
*** DONE Comment
:PROPERTIES:
:ID:       A8833E31-36C5-4E36-B438-D92E6A38F945
:END:
[[http://api.stackexchange.com/docs/types/comment][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/comment
    "All `stack-api/question's and `stack-api/answer's on a Stack
  Exchange site can be commented on, and this type represents those
  comments.  Comments can also be optionally directed at
  `stack-api/user's, when this is the case the reply-to-user
  property is set (if it is requested in the current filter)."
  
    (body          nil :type string) ; unchanged in unsafe filters
    (body-markdown nil :type string)
    (comment-id    nil :type integer) ; refers to a comment
    (creation-date nil :type date)
    (edited        nil :type boolean)
    (link          nil :type string) ; unchanged in unsafe filters
    (post-id       nil :type integer) ; refers to a post
    (post-type     nil :type (memq 'question
                                   'answer))
    (score         nil :type integer)
  
    (reply-to-user nil :type shallow-user)
    (owner         nil :type shallow-user))
#+end_src
*** DONE Notification
:PROPERTIES:
:ID:       AB5D5709-BD56-461B-ADD5-A602E095AACE
:END:
[[http://api.stackexchange.com/docs/types/notification][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/notification
    "This type represents an item in a `stack-api/user's Notification Tab.
  
  Be aware that the types of items returned by this method are
  subject to change at any time.  In particular, new types may be
  introduced without warning.  Applications should deal with these
  changes gracefully.
  
  Applications should not publish a user's notification tab without
  their explicit consent, as while most item types are public in
  nature there are a few which are (and should remain) private."
  
    (body              nil :type string) ; unchanged in unsafe filters
    (creation-date     nil :type date)
    (is-unread         nil :type boolean)
    (notification-type nil :type (memq 'generic
                                       'profile-activity
                                       'bounty-expired
                                       'bounty-expires-in-one-day
                                       'bounty-expires-in-three-days
                                       'badge-earned
                                       'reputation-bonus
                                       'accounts-associated
                                       'new-privilege
                                       'post-migrated
                                       'moderator-message
                                       'registration-reminder
                                       'edit-suggested
                                       'substantive-edit
                                       'bounty-grace-period-started))
    (site              nil :type site)
  
    (post-id           nil :type integer)) ; refers to a post
#+end_src
*** DONE Info
:PROPERTIES:
:ID:       C659783B-7BAB-45B9-AB1C-06A5BBC031EE
:END:
[[http://api.stackexchange.com/docs/types/info][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/info
    "This type describes a `stack-api/site' in the Stack Exchange network."
  
    (answers-per-minute   nil :type decimal)
    (api-revision         nil :type string)
    (badges-per-minute    nil :type decimal)
    (new-active-users     nil :type integer)
    (questions-per-minute nil :type decimal)
    (site                 nil :type site)
    (total-accepted       nil :type integer)
    (total-answers        nil :type integer)
    (total-badges         nil :type integer)
    (total-comments       nil :type integer)
    (total-questions      nil :type integer)
    (total-unanswered     nil :type integer)
    (total-users          nil :type integer)
    (total-votes          nil :type integer))
#+end_src
*** DONE Suggested Edit
:PROPERTIES:
:ID:       70289070-C43C-484F-A967-129EC4DC8AC7
:END:
[[http://api.stackexchange.com/docs/types/suggested-edit][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/suggested-edit
    "This type represents suggested edit on a Stack Exchange `stack-api/site'."
  
    (comment           nil :type string)
    (creation-date     nil :type date)
    (post-id           nil :type integer) ; refers to a post
    (post-type         nil :type (memq 'question
                                       'answer))
    (suggested-edit-id nil :type integer) ; refers to a suggested-edit
  
    (body              nil :type string) unchanged in unsafe filters
    (proposing-user    nil :type shallow-user)
    (rejection-date    nil :type date)
    (tags              nil :type (list string))
    (title             nil :type string)
    (approval-date     nil :type date))
#+end_src
*** DONE Badge
:PROPERTIES:
:ID:       D0C151F1-384E-4995-B091-1EC1FE265572
:END:
[[http://api.stackexchange.com/docs/types/badge][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/badge
    "This type represents a badge on a Stack Exchange `stack-api/site'.
  
  Some badges, like Autobiographer, are held in common across all
  Stack Exchange sites. Others, like most tag badges, vary on a
  site by site basis.
  
  Remember that ids are never guaranteed to be the same between
  sites, even if a badge exists on both sites."
  
    (award-count nil :type integer)
    (badge-id    nil :type integer) ; refers to a badge
    (badge-type  nil :type (memq 'named
                                 'tag-based))
    (description nil :type string) ; unchanged in unsafe filters
    (link        nil :type string) ; unchanged in unsafe filters
    (name        nil :type string)
    (rank        nil :type (memq 'gold
                                 'silver
                                 'bronze)
  
    (user        nil :type shallow-user))
#+end_src
*** DONE Badge Count
:PROPERTIES:
:ID:       71660EB1-559E-4AFA-BB70-2FF0C9F8FD50
:END:
[[http://api.stackexchange.com/docs/types/badge-count][Official documentation]]
#+begin_src elisp
  (defstruct stack-api/badge-count
    "This type represents the total `stack-api/badge's, segregated by
  rank, a `stack-api/user' has earned."
  
    (bronze nil :type integer)
    (gold   nil :type integer)
    (silver nil :type integer))
#+end_src
*** DONE Event
:PROPERTIES:
:ID:       79665A3A-22C4-4D8C-83AB-505BA418C380
:END:
[[http://api.stackexchange.com/docs/types/event][Official documentation]]
#+begin_src emacs-lisp
  (defstruct stack-api/event
    "This type describes an event that has recently occurred on a Stack Exchange `stack-api/site'.
  
  A minimal ammount of information is present in these events for
  scaling purposes.  It is expected that most applications will
  make follow up calls to the API to \"flesh out\" the event
  objects for their own purposes."
  
    (creation-date nil :type date)
    (event-id      nil :type integer) ; the id of the object ('answer, 'comment, 'question, or 'user) the event describes
    (event-type    nil :type (memq 'question-posted
                                   'answer-posted
                                   'comment-posted
                                   'post-edited
                                   'user-created))
    (excerpt       nil :type string) ; unchanged in unsafe filters
    (link          nil :type string)) ; unchanged in unsafe filters
#+end_src
*** DONE Tag
:PROPERTIES:
:ID:       7C07C4DA-AA77-4EE2-B881-19C1E0E98C1A
:END:
[[http://api.stackexchange.com/docs/types/tag][Official documentation]]
#+begin_src emacs-lisp
  (defstruct stack-api/tag
    "This type represents a tag on a Stack Exchange `stack-api/site'.
  
  Applications should be prepared for the destruction of tags,
  though this tends to be a rare event."
  
    (count              nil :type integer)
    (has-synonyms       nil :type boolean)
    (is-moderator-only  nil :type boolean)
    (is-required        nil :type boolean)
    (name               nil :type string)

    (user-id            nil :type integer) ; refers to a user 
    (last-activity-date nil :type date))
#+end_src
*** DONE User Timeline
:PROPERTIES:
:ID:       6ED4E402-7F84-48FA-BAD3-88BF787B97A8
:END:
[[http://api.stackexchange.com/docs/types/user-timeline][Official documentation]]
#+begin_src emacs-lisp
  (defstruct stack-api/user-timeline
    "This type describes public actions a `stack-api/user' has taken."
  
    (creation-date     nil :type date)
    (detail            nil :type string)
    (link              nil :type string) ; unchanged in unsafe filters
    (post-type         nil :type (memq 'question
                                       'answer))
    (timeline-type     nil :type (memq 'commented
                                       'asked
                                       'answered
                                       'badge
                                       'revision
                                       'accepted
                                       'reviewed
                                       'suggested))
    (user-id           nil :type integer) ; refers to a user  
  
    (comment-id        nil :type integer) ; refers to a comment
    (unchanged         nil :type in) unsafe filters
    (post-id           nil :type integer) ; refers to a post
    (suggested-edit-id nil :type integer) ; refers to a suggested-edit
    (title             nil :type string)
    (badge-id          nil :type integer)) ; refers to a badge
#+end_src
*** DONE Filter
:PROPERTIES:
:ID:       05BB0D9E-9324-4CD6-A018-310B17E45E56
:END:
[[http://api.stackexchange.com/docs/types/filter][Official documentation]]
#+begin_src emacs-lisp
  (defstruct stack-api/filter
    "This type describes a filter on the Stack Exchange API.
  
  When passing a filter to methods in the API, it should be
  referred to by name alone."
  
    (filter          nil :type string)
    (filter_type     nil :type (memq 'safe
                                     'unsafe
                                     'invalid))
    (included_fields nil :type (list string)))
#+end_src
#+name: default-filter
#+begin_example json
  {
    "included_fields": [
      ".backoff",
      ".error_id",
      ".error_message",
      ".error_name",
      ".has_more",
      ".items",
      ".quota_max",
      ".quota_remaining",
      "access_token.access_token",
      "access_token.account_id",
      "access_token.expires_on_date",
      "access_token.scope",
      "account_merge.merge_date",
      "account_merge.new_account_id",
      "account_merge.old_account_id",
      "answer.answer_id",
      "answer.community_owned_date",
      "answer.creation_date",
      "answer.is_accepted",
      "answer.last_activity_date",
      "answer.last_edit_date",
      "answer.locked_date",
      "answer.owner",
      "answer.question_id",
      "answer.score",
      "badge.award_count",
      "badge.badge_id",
      "badge.badge_type",
      "badge.link",
      "badge.name",
      "badge.rank",
      "badge.user",
      "badge_count.bronze",
      "badge_count.gold",
      "badge_count.silver",
      "closed_details.by_users",
      "closed_details.description",
      "closed_details.on_hold",
      "closed_details.original_questions",
      "closed_details.reason",
      "comment.comment_id",
      "comment.creation_date",
      "comment.edited",
      "comment.owner",
      "comment.post_id",
      "comment.reply_to_user",
      "comment.score",
      "error.description",
      "error.error_id",
      "error.error_name",
      "event.creation_date",
      "event.event_id",
      "event.event_type",
      "filter.filter",
      "filter.filter_type",
      "filter.included_fields",
      "flag_option.count",
      "flag_option.description",
      "flag_option.dialog_title",
      "flag_option.has_flagged",
      "flag_option.option_id",
      "flag_option.requires_comment",
      "flag_option.requires_question_id",
      "flag_option.requires_site",
      "flag_option.sub_options",
      "flag_option.title",
      "inbox_item.answer_id",
      "inbox_item.comment_id",
      "inbox_item.creation_date",
      "inbox_item.is_unread",
      "inbox_item.item_type",
      "inbox_item.link",
      "inbox_item.question_id",
      "inbox_item.site",
      "inbox_item.title",
      "info.answers_per_minute",
      "info.api_revision",
      "info.badges_per_minute",
      "info.new_active_users",
      "info.questions_per_minute",
      "info.total_accepted",
      "info.total_answers",
      "info.total_badges",
      "info.total_comments",
      "info.total_questions",
      "info.total_unanswered",
      "info.total_users",
      "info.total_votes",
      "migration_info.on_date",
      "migration_info.other_site",
      "migration_info.question_id",
      "network_activity.account_id",
      "network_activity.activity_type",
      "network_activity.api_site_parameter",
      "network_activity.badge_id",
      "network_activity.creation_date",
      "network_activity.description",
      "network_activity.link",
      "network_activity.post_id",
      "network_activity.score",
      "network_activity.tags",
      "network_activity.title",
      "network_post.post_id",
      "network_post.post_type",
      "network_post.score",
      "network_post.title",
      "network_user.account_id",
      "network_user.answer_count",
      "network_user.badge_counts",
      "network_user.creation_date",
      "network_user.last_access_date",
      "network_user.question_count",
      "network_user.reputation",
      "network_user.site_name",
      "network_user.site_url",
      "network_user.user_id",
      "notice.body",
      "notice.creation_date",
      "notice.owner_user_id",
      "notification.body",
      "notification.creation_date",
      "notification.is_unread",
      "notification.notification_type",
      "notification.post_id",
      "notification.site",
      "original_question.accepted_answer_id",
      "original_question.answer_count",
      "original_question.question_id",
      "original_question.title",
      "post.creation_date",
      "post.last_activity_date",
      "post.last_edit_date",
      "post.link",
      "post.owner",
      "post.post_id",
      "post.post_type",
      "post.score",
      "privilege.description",
      "privilege.reputation",
      "privilege.short_description",
      "question.accepted_answer_id",
      "question.answer_count",
      "question.bounty_amount",
      "question.bounty_closes_date",
      "question.closed_date",
      "question.closed_reason",
      "question.community_owned_date",
      "question.creation_date",
      "question.is_answered",
      "question.last_activity_date",
      "question.last_edit_date",
      "question.link",
      "question.locked_date",
      "question.migrated_from",
      "question.migrated_to",
      "question.owner",
      "question.protected_date",
      "question.question_id",
      "question.score",
      "question.tags",
      "question.title",
      "question.view_count",
      "question_timeline.comment_id",
      "question_timeline.creation_date",
      "question_timeline.down_vote_count",
      "question_timeline.owner",
      "question_timeline.post_id",
      "question_timeline.question_id",
      "question_timeline.revision_guid",
      "question_timeline.timeline_type",
      "question_timeline.up_vote_count",
      "question_timeline.user",
      "related_site.api_site_parameter",
      "related_site.name",
      "related_site.relation",
      "related_site.site_url",
      "reputation.on_date",
      "reputation.post_id",
      "reputation.post_type",
      "reputation.reputation_change",
      "reputation.user_id",
      "reputation.vote_type",
      "reputation_history.creation_date",
      "reputation_history.post_id",
      "reputation_history.reputation_change",
      "reputation_history.reputation_history_type",
      "reputation_history.user_id",
      "revision.comment",
      "revision.creation_date",
      "revision.is_rollback",
      "revision.last_tags",
      "revision.last_title",
      "revision.post_id",
      "revision.post_type",
      "revision.revision_guid",
      "revision.revision_number",
      "revision.revision_type",
      "revision.set_community_wiki",
      "revision.tags",
      "revision.title",
      "revision.user",
      "search_excerpt.answer_count",
      "search_excerpt.answer_id",
      "search_excerpt.body",
      "search_excerpt.creation_date",
      "search_excerpt.equivalent_tag_search",
      "search_excerpt.excerpt",
      "search_excerpt.has_accepted_answer",
      "search_excerpt.is_accepted",
      "search_excerpt.is_answered",
      "search_excerpt.item_type",
      "search_excerpt.last_activity_date",
      "search_excerpt.question_id",
      "search_excerpt.score",
      "search_excerpt.tags",
      "search_excerpt.title",
      "shallow_user.accept_rate",
      "shallow_user.display_name",
      "shallow_user.link",
      "shallow_user.profile_image",
      "shallow_user.reputation",
      "shallow_user.user_id",
      "shallow_user.user_type",
      "site.aliases",
      "site.api_site_parameter",
      "site.audience",
      "site.closed_beta_date",
      "site.favicon_url",
      "site.high_resolution_icon_url",
      "site.icon_url",
      "site.launch_date",
      "site.logo_url",
      "site.markdown_extensions",
      "site.name",
      "site.open_beta_date",
      "site.related_sites",
      "site.site_state",
      "site.site_type",
      "site.site_url",
      "site.styling",
      "site.twitter_account",
      "styling.link_color",
      "styling.tag_background_color",
      "styling.tag_foreground_color",
      "suggested_edit.approval_date",
      "suggested_edit.comment",
      "suggested_edit.creation_date",
      "suggested_edit.post_id",
      "suggested_edit.post_type",
      "suggested_edit.proposing_user",
      "suggested_edit.rejection_date",
      "suggested_edit.suggested_edit_id",
      "suggested_edit.tags",
      "suggested_edit.title",
      "tag.count",
      "tag.has_synonyms",
      "tag.is_moderator_only",
      "tag.is_required",
      "tag.name",
      "tag.user_id",
      "tag_score.post_count",
      "tag_score.score",
      "tag_score.user",
      "tag_synonym.applied_count",
      "tag_synonym.creation_date",
      "tag_synonym.from_tag",
      "tag_synonym.last_applied_date",
      "tag_synonym.to_tag",
      "tag_wiki.body_last_edit_date",
      "tag_wiki.excerpt",
      "tag_wiki.excerpt_last_edit_date",
      "tag_wiki.tag_name",
      "top_tag.answer_count",
      "top_tag.answer_score",
      "top_tag.question_count",
      "top_tag.question_score",
      "top_tag.tag_name",
      "top_tag.user_id",
      "user.accept_rate",
      "user.account_id",
      "user.age",
      "user.badge_counts",
      "user.creation_date",
      "user.display_name",
      "user.is_employee",
      "user.last_access_date",
      "user.last_modified_date",
      "user.link",
      "user.location",
      "user.profile_image",
      "user.reputation",
      "user.reputation_change_day",
      "user.reputation_change_month",
      "user.reputation_change_quarter",
      "user.reputation_change_week",
      "user.reputation_change_year",
      "user.timed_penalty_date",
      "user.user_id",
      "user.user_type",
      "user.website_url",
      "user_timeline.badge_id",
      "user_timeline.comment_id",
      "user_timeline.creation_date",
      "user_timeline.detail",
      "user_timeline.post_id",
      "user_timeline.post_type",
      "user_timeline.suggested_edit_id",
      "user_timeline.timeline_type",
      "user_timeline.title",
      "user_timeline.user_id",
      "write_permission.can_add",
      "write_permission.can_delete",
      "write_permission.can_edit",
      "write_permission.max_daily_actions",
      "write_permission.min_seconds_between_actions",
      "write_permission.object_type",
      "write_permission.user_id"
    ],
    "filter": "default",
    "filter_type": "safe"
  }
#+end_example
*** DONE Reputation
:PROPERTIES:
:ID:       120E55D5-C3A8-4C81-A5F6-FD769EE29C8A
:END:
[[http://api.stackexchange.com/docs/types/reputation][Official documentation]]
#+begin_src emacs-lisp
  (defstruct stack-api/reputation
    "This type represents a change in reputation for a User.
  
  All methods that return this data will scrub it to a degree, to
  increase the difficulty of correlating reputation changes with
  down voting."
  
    (link              nil :type string) ; unchanged in unsafe filters
    (on-date           nil :type date)
    (post-id           nil :type integer) ; refers to a post
    (post-type         nil :type (memq 'question
                                       'answer))
    (reputation-change nil :type integer)
    (title             nil :type string)
    (user-id           nil :type integer) ; refers to a user
    (vote-type         nil :type (memq 'accepts
                                       'up-votes
                                       'down-votes
                                       'bounties-offered
                                       'bounties-won
                                       'spam
                                       'suggested-edits)))
#+end_src
** Cache
In order to minimize the number of calls we make to the API, we set up
a number of cells in which to store data.

At the very top, we have a list of sites.  Each site is a pair where
the first element is a collection of information about the site in
general (as a =site= object).

- car :: meta-information about the site
- cdr :: list of questions

- sites :: stores information about all sites in general
- questions :: stores information about each site's questions as
               retrieved.

**** Sites data structure

**** Question data structure

**** Implementation
:PROPERTIES:
:ID:       C6E34044-386F-42F0-9401-B93E831347A9
:END:

#+begin_src emacs-lisp
  (defvar stack-api/cache nil
    "A sparse cache of information for the sites on the Stack
  Exchange Network")
#+end_src
** Authentication
https://api.stackexchange.com/docs/authentication
** Finding out if a =site= is 'meta
:PROPERTIES:
:ID:       F7E421EA-D34E-4F8C-A269-266FED20D9B0
:END:
#+begin_src emacs-lisp
(defun stack-api/site-is-meta (site)
(string= "meta-site" (assoc-default 'site-type site)))
#+end_src
* Acknowledgments
Thanks to everyone who made this possible, especially the community
for which this package is intended.
** StackExchange Users
- tkf, the creator and maintainer of the =request= package, without
  which this package would still be a pipe dream.
** GitHub Users
** Questions
Below is a list of questions I've made while creating this package, so
a round of applause to the awesome community that made this possible.
- [[http://stackoverflow.com/questions/15118304][Making JSON requests within Emacs]]
- [[http://stackoverflow.com/questions/15190684][JSON requests within Emacs, Phase 2: Getting a collection of items]]
