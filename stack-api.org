#+Title: Stack Exchange API
#+Author: Sean Allred
#+Date: [2014-01-06 Mon]
#+MACRO: version 2.1

#+Version: 2.1

#+PROPERTY: tangle "./elisp/stack-api.el"
#+PROPERTY: noweb tangle

#+NAME: some
#+begin_src emacs-lisp :exports none :tangle no
  (substring (shell-command-to-string "git rev-parse --short HEAD") 0 -1)
#+end_src

The purpose of this package is to create an interaction between Emacs
Lisp and the Stack Exchange API.  I anticipate that no function herein
has side-effects; all side-effects should be implemented in a package
that uses these utilities (such as =stack-mode.el=).

This document interacts with version {{{version}}} of the
StackExchange API and is maintained by {{{author}}}.  It was last
modified at {{{modification-time(%Y-%m-%dT%T%z)}}} (commit ??).  This
copy was exported on {{{time(%Y-%m-%dT%T%z)}}}.

* Acknowledgments
Thanks to everyone who made this possible, especially the community
for which this package is intended.

** Users
- tkf, the creator and maintainer of the =request= package, without
  which this package would still be a pipe dream.
** Questions
Below are a list of questions I've made while creating this package.
- [[http://stackoverflow.com/questions/15118304][Making JSON requests within Emacs]]
- [[http://stackoverflow.com/questions/15190684][JSON requests within Emacs, Phase 2: Getting a collection of items]]
* Supporting Utilitarian Functions
This variable declares the format off a time string.  The format has
been designed to be compatible with Org-mode time-stamps, for whatever
purpose that may come in handy for.
#+begin_src emacs-lisp
  (defvar stack-time-format-string
    "[%Y-%m-%d %a %H:%M:%S]")
#+end_src

This function takes the time `EPOCH-TIME` and formats it into a string
according to `STACK-FORMAT-TIME-STRING`.
#+begin_src emacs-lisp
  (defun stack-make-time (epoch-time)
    (format-time-string stack-time-format-string (seconds-to-time epoch-time)))
#+end_src

Converts the key-value pairs of an association list into the
equivalent JSON format.
#+begin_example
\* (alist-to-json '(("page" 2) ("site" "tex")))
"page=2&site=tex&"
#+end_example

#+begin_src emacs-lisp
  (defun alist-to-json (alist)
    "Converts the key-value pairs of `ALIST` into a JSON-friendly
  string: \"key1=value1&key2=value2&\"."
    (apply 'concat
           (mapcar (lambda (kv)
                     (format "%s=%s&" (car kv)
                             (if (stringp (cdr kv)) 
                                 (cdr kv)
                               (number-to-string (cdr kv)))
                             ))
                   alist)))
#+end_src

* Implementation
:PROPERTIES:
:version:  2.1
:END:

Version 2.1 of the Stack Exchange API allows for read-only access (and
write-access for comments!) to the Stack Exchange network.

The Stack Exchange API uses JSON as its main method of communication.

We shall define the API version:
#+begin_src emacs-lisp
  (defvar stack-api/root "api.stackexchange.com/2.1/")
#+end_src

** TODO Supported Functions
This is a list of functions in Stack Mode that are supported by this
version of the API.
** Emacs Lisp Implementation
:PROPERTIES:
:ID:       3E3B5878-8F8D-44E5-9F0B-C91CF020736B
:END:
*** TODO Authentication
https://api.stackexchange.com/docs/authentication
*** TODO Information Retrieval
The most basic use of the API is to retrieve information.  With the
StackExchange API, such requests are answered with JSON, so we shall
require both the JSON package and the REQUEST package, available via
your favorite package repository.

#+begin_src emacs-lisp
  (require 'json)
  (require 'request)
#+end_src

Now, we shall make a generalized 'requesting' function tailored to the
Stack Exchange API.  In order to ease the requests that =stack-mode=
will make, this function takes a single =call= (such as "sites" or
"sites/info") and a list of parameters.  Both arguments are mandatory
at the moment.

#+begin_src emacs-lisp
  (defun stack-api/request (call &optional keys-alist)
    "Makes the specified `CALL` to the Stack Exchange API with the
  key-value pairs given `KEYS-ALIST`.  For example,
  
    (stack-api/request \"sites\" '((page . 2) (page_size . 25)))"
    
    (request (concat stack-api/root call)
             :params keys-alist
             :parser 'json-read
             :sync t
             :success (lambda (&rest args)
                        (setq stack-api/request/return (plist-get args :data))))
    stack-api/request/return)
  
  (defun stack-api/get-items (json-object)
    "Retrieves the `ITEMS` portion of the `JSON-OBJECT` (as
  returned by `STACK-API/REQUEST`)."
    (cdr (cadddr json-object)))
#+end_src
*** Classes
Since we are dealing with data that maintains a specific form
  (and we are even receiving it as such via JSON),
  it makes sense to create objects for the major concepts of the API.
Intelligent structure are provided by the Common Lisp library.
#+begin_src elisp
  (require 'cl)
#+end_src

**** DONE [[http://api.stackexchange.com/docs/types/date][Date]]
#+begin_src elisp
  (defstruct stack-api/date
    "UNIX epoch time") ; do I really need a separate type for this?
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/site][Site]]
#+begin_src elisp
  (defstruct stack-api/site
    "This type represents a site in the Stack Exchange network."
  
   api-site-parameter       ; string
   audience                 ; string
   favicon-url              ; string
   icon-url                 ; string
   launch-date              ; date
   logo-url                 ; string
   name                     ; string
   site-state               ; one of 'normal, 'closed-beta, 'open-beta, or 'linked-meta
   site-type                ; one of 'main-site or 'meta-site, but new options may be added.
   site-url                 ; string
   styling                  ; styling
   ;; the following may be absent
   open-beta-date           ; date
   related-sites            ; an array of related-sites
   markdown-extensions      ; an array of 'MathJax', 'Prettify', 'Balsamiq' or 'jTab' strings, but new options may be added.
   high-resolution-icon-url ; string
   closed-beta-date         ; date
   aliases)                 ; an array of strings
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/related-site][Related Site]]
#+begin_src elisp
  (defstruct stack-api/related-site
    "This type represents a `stack-api/site' that is related in
    some way to another site.  Examples include 'chat and 'meta,
    and 'parent sites.  Applications should be able to gracefully
    handle the additon of new related site types."
  
    name                ; string
    relation            ; one of 'parent, 'meta, or 'chat, but new options may be added
    site-url            ; string
    api-site-parameter) ; string
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/user][User]]
#+begin_src elisp
  (defstruct stack-api/user
    "This type describes a user on a Stack Exchange site.  There
  are a number of different user types returned by the Stack
  Exchange API, depending on the method.  Others include
  `stack-api/shallow-user' and `stack-api/network-user'."
  
    account-id                ; integer
    answer-count              ; integer
    badge-counts              ; badge-count
    creation-date             ; date
    display-name              ; string
    down-vote-count           ; integer
    is-employee               ; boolean
    last-access-date          ; date
    link                      ; string ; unchanged in unsafe filters
    profile-image             ; string ; unchanged in unsafe filters
    question-count            ; integer
    reputation                ; integer
    reputation-change-day     ; integer
    reputation-change-month   ; integer
    reputation-change-quarter ; integer
    reputation-change-week    ; integer
    reputation-change-year    ; integer
    up-vote-count             ; integer
    user-id                   ; integer, refers to a user
    user-type                 ; one of 'unregistered, 'registered, 'moderator, or 'does-not-exist
    view-count                ; integer
    ;; the following may be absent
    about-me                  ; string ; unchanged in unsafe filters
    accept-rate               ; integer
    age                       ; integer
    last-modified-date        ; date
    location                  ; string
    timed-penalty-date        ; date
    website-url)              ; string ; unchanged in unsafe filters
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/shallow-user][Shallow User]]
#+begin_src elisp
  (defstruct stack-api/shallow-user
    "This type represents a user, but omits many of the fields
    found on the full User type.  This type is mostly analogous to
    the 'user card' found on many pages (like the question page) on
    a Stack Exchange site."
  
    user-type     ; one of 'unregistered, 'registered, 'moderator, or 'does-not-exist
    ;; the following may be absent
    user-id       ; integer, refers to a user
    reputation    ; integer
    profile-image ; string ; unchanged in unsafe filters
    link          ; string ; unchanged in unsafe filters
    display-name  ; string
    accept-rate   ; integer
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/network-user][Network User]]
#+begin_src elisp
  (defstruct stack-api/network-api
  "This type represents a user, however it is greatly reduced when
  compared to the full User type to reduce the amount of work that
  needs to be done to fetch it from multiple sites in the network."
  
   account-id       ; integer
   answer-count     ; integer
   badge-counts     ; badge-count
   creation-date    ; date
   last-access-date ; date
   question-count   ; integer
   reputation       ; integer
   site-name        ; string
   site-url         ; string
   user-id          ; integer, refers to a user
   user-type)       ; one of 'unregistered, 'registered, 'moderator, or 'does-not-exist
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/post][Post]]
#+begin_src elisp
  (defstruct stack-api/post
  "This type represents the intersection of the `stack-api/question' and `stack-api/answer' types.
  
  It's used in cases where it would be beneficial to mix questions
  and answers in a response."
  
  body               ; string ; unchanged in unsafe filters
  creation-date      ; date
  down-vote-count    ; integer
  last-activity-date ; date
  link               ; string
  post-id            ; integer, refers to a post
  post-type          ; one of 'question or 'answer
  score              ; integer
  up-vote-count      ; integer
  ;; the following may be absent
  last-edit-date     ; date
  owner              ; shallow-user
  comments)          ; an array of comments
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/question][Question]]
#+begin_src elisp
  (defstruct stack-api/question
    "This type represents a question on one of the Stack Exchange
  sites, such as this famous RegEx question.  This type is heavily
  inspired by the question page itself, and can optionally return
  `stack-api/comment's and `stack-api/answer's accordingly."
  
    answer-count         ; integer
    body                 ; string; unchanged in unsafe filters
    close-vote-count     ; integer
    creation-date        ; date
    delete-vote-count    ; integer
    down-vote-count      ; integer
    favorite-count       ; integer
    is-answered          ; boolean
    last-activity-date   ; date
    link                 ; string; unchanged in unsafe filters
    notice               ; notice
    question-id          ; integer, refers to a question
    reopen-vote-count    ; integer
    score                ; integer
    tags                 ; an array of strings
    title                ; string
    up-vote-count        ; integer
    view-count           ; integer
    last-edit-date       ; date
    ;; the following may be absent
    accepted-answer-id   ; integer
    answers              ; an array of answers
    bounty-amount        ; integer
    bounty-closes-date   ; date
    closed-date          ; date
    closed-reason        ; string
    comments             ; an array of comments
    community-owned-date ; date
    protected-date       ; date
    owner                ; shallow-user
    migrated-to          ; migration-info
    migrated-from        ; migration-info
    locked-date)         ; date
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/answer][Answer]]
#+begin_src elisp
  (defstruct stack-api/answer
    "This type represents an answer to a question on one of the
  Stack Exchange sites, such as this famous answer of bobince's.
  As on the question page, it is possible to fetch the
  `stack-api/comment's on an answer as part of a call; though this
  is not done by default."
  
    answer-id            ; integer, refers to an answer
    body                 ; string ; unchanged in unsafe filters
    creation-date        ; date
    down-vote-count      ; integer
    is-accepted          ; boolean
    last-activity-date   ; date
    link                 ; string ; unchanged in unsafe filters
    question-id          ; integer, refers to a question
    score                ; integer
    tags                 ; an array of strings
    title                ; string
    up-vote-count        ; integer
    ;; the following may be absent
    owner                ; shallow-user
    locked-date          ; date
    last-edit-date       ; date
    community-owned-date ; date
    comments)            ; an array of comments
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/comment][Comment]]
#+begin_src elisp
  (defstruct stack-api/comment
    "All `stack-api/question's and `stack-api/answer's on a Stack
  Exchange site can be commented on, and this type represents those
  comments.  Comments can also be optionally directed at
  `stack-api/user's, when this is the case the reply-to-user
  property is set (if it is requested in the current filter)."
  
    body          ; string ; unchanged in unsafe filters
    body-markdown ; string
    comment-id    ; integer, refers to a comment
    creation-date ; date
    edited        ; boolean
    link          ; string ; unchanged in unsafe filters
    post-id       ; integer, refers to a post
    post-type     ; one of 'question or 'answer
    score         ; integer
    ;; the following may be absent
    reply-to-user ; shallow-user
    owner)        ; shallow-user
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/notification][Notification]]
#+begin_src elisp
(defstruct stack-api/notification
"This type represents an item in a `stack-api/user's Notification Tab.

Be aware that the types of items returned by this method are
subject to change at any time.  In particular, new types may be
introduced without warning.  Applications should deal with these
changes gracefully.

Applications should not publish a user's notification tab without
their explicit consent, as while most item types are public in
nature there are a few which are (and should remain) private."

body              ; string ; unchanged in unsafe filters
creation-date     ; date
is-unread         ; boolean
notification-type ; one of 'generic, 'profile-activity, 'bounty-expired, 'bounty-expires-in-one-day, 'badge-earned, 'bounty-expires-in-three-days, 'reputation-bonus, 'accounts-associated, 'new-privilege, 'post-migrated, 'moderator-message, 'registration-reminder, 'edit-suggested, 'substantive-edit, or 'bounty-grace-period-started
site              ; site
;; the following may be absent
post-id)          ; integer, refers to a post
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/info][Info]]
#+begin_src elisp
(defstruct stack-api/info
"This type describes a `stack-api/site' in the Stack Exchange network."

answers-per-minute   ; decimal
api-revision         ; string
badges-per-minute    ; decimal
new-active-users     ; integer
questions-per-minute ; decimal
site                 ; site
total-accepted       ; integer
total-answers        ; integer
total-badges         ; integer
total-comments       ; integer
total-questions      ; integer
total-unanswered     ; integer
total-users          ; integer
total-votes)         ; integer
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/suggested-edit][Suggested Edit]]
#+begin_src elisp
(defstruct stack-api/suggested-edit
"This type represents suggested edit on a Stack Exchange `stack-api/site'."

comment           ; string
creation-date     ; date
post-id           ; integer, refers to a post
post-type         ; one of 'question or 'answer
suggested-edit-id ; integer, refers to a suggested-edit
;; the following may be absent
body              ; string unchanged in unsafe filters
proposing-user    ; shallow-user
rejection-date    ; date
tags              ; an array of strings
title             ; string
approval-date)    ; date
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/badge][Badge]]
#+begin_src elisp
  (defstruct stack-api/badge
  "This type represents a badge on a Stack Exchange `stack-api/site'.
  
  Some badges, like Autobiographer, are held in common across all
  Stack Exchange sites. Others, like most tag badges, vary on a
  site by site basis.
  
  Remember that ids are never guaranteed to be the same between
  sites, even if a badge exists on both sites."
  
   award-count ; integer
   badge-id    ; integer, refers to a badge
   badge-type  ; one of 'named or 'tag-based
   description ; string ; unchanged in unsafe filters
   link        ; string ; unchanged in unsafe filters
   name        ; string
   rank        ; one of 'gold, 'silver, or 'bronze
   ;; the following may be absent
   user)       ; shallow-user
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/badge-count][Badge Count]]
#+begin_src elisp
(defstruct stack-api/badge-count
"This type represents the total `stack-api/badge's, segregated by
rank, a `stack-api/user' has earned."

bronze  ; integer
gold    ; integer
silver) ; integer
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/event][Event]]
#+begin_src emacs-lisp
  (defstruct stack-api/event
    "This type describes an event that has recently occurred on a Stack Exchange `stack-api/site'.
  
  A minimal ammount of information is present in these events for
  scaling purposes.  It is expected that most applications will
  make follow up calls to the API to \"flesh out\" the event
  objects for their own purposes."
  
   creation-date ; date
   event-id      ; the id of the object ('answer, 'comment, 'question, or 'user) the event describes
   event-type    ; one of 'question-posted, 'answer-posted, 'comment-posted, 'post-edited, or 'user-created
   excerpt       ; string ; unchanged in unsafe filters
   link          ; string ; unchanged in unsafe filters
  )
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/tag][Tag]]
#+begin_src emacs-lisp
  (defstruct stack-api/tag
    "This type represents a tag on a Stack Exchange `stack-api/site'.
  
  Applications should be prepared for the destruction of tags,
  though this tends to be a rare event."
  
   count               ; integer
   has-synonyms        ; boolean
   is-moderator-only   ; boolean
   is-required         ; boolean
   name                ; string
   ;; the following may be absent
   user-id             ; integer, refers to a user 
   last-activity-date) ; date 
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/user-timeline][User Timeline]]
#+begin_src emacs-lisp
  (defstruct stack-api/user-timeline
    "This type describes public actions a `stack-api/user' has taken."
  
    creation-date     ; date
    detail            ; string
    link              ; string
    unchanged         ; in unsafe filters
    post-type         ; one of 'question or 'answer
    timeline-type     ; one of 'commented, 'asked, 'answered, 'badge, 'revision, 'accepted, 'reviewed, or 'suggested
    user-id           ; integer, refers to a user  
    ;; the following may be absent
    comment-id        ; integer, refers to a comment
    unchanged         ; in unsafe filters
    post-id           ; integer, refers to a post
    suggested-edit-id ; integer, refers to a suggested-edit
    title             ; string
    badge-id          ; integer, refers to a badge
  )
#+end_src
**** DONE [[http://api.stackexchange.com/docs/types/filter][Filter]]
#+begin_src emacs-lisp
  (defstruct stack-api/filter
    "This type describes a filter on the Stack Exchange API.
  
  When passing a filter to methods in the API, it should be
  referred to by name alone."
  
   filter           ; string
   filter_type      ; one of safe, unsafe, or invalid
   included_fields) ; an array of strings
#+end_src
#+name: default-filter
#+begin_example json
  {
    "included_fields": [
      ".backoff",
      ".error_id",
      ".error_message",
      ".error_name",
      ".has_more",
      ".items",
      ".quota_max",
      ".quota_remaining",
      "access_token.access_token",
      "access_token.account_id",
      "access_token.expires_on_date",
      "access_token.scope",
      "account_merge.merge_date",
      "account_merge.new_account_id",
      "account_merge.old_account_id",
      "answer.answer_id",
      "answer.community_owned_date",
      "answer.creation_date",
      "answer.is_accepted",
      "answer.last_activity_date",
      "answer.last_edit_date",
      "answer.locked_date",
      "answer.owner",
      "answer.question_id",
      "answer.score",
      "badge.award_count",
      "badge.badge_id",
      "badge.badge_type",
      "badge.link",
      "badge.name",
      "badge.rank",
      "badge.user",
      "badge_count.bronze",
      "badge_count.gold",
      "badge_count.silver",
      "closed_details.by_users",
      "closed_details.description",
      "closed_details.on_hold",
      "closed_details.original_questions",
      "closed_details.reason",
      "comment.comment_id",
      "comment.creation_date",
      "comment.edited",
      "comment.owner",
      "comment.post_id",
      "comment.reply_to_user",
      "comment.score",
      "error.description",
      "error.error_id",
      "error.error_name",
      "event.creation_date",
      "event.event_id",
      "event.event_type",
      "filter.filter",
      "filter.filter_type",
      "filter.included_fields",
      "flag_option.count",
      "flag_option.description",
      "flag_option.dialog_title",
      "flag_option.has_flagged",
      "flag_option.option_id",
      "flag_option.requires_comment",
      "flag_option.requires_question_id",
      "flag_option.requires_site",
      "flag_option.sub_options",
      "flag_option.title",
      "inbox_item.answer_id",
      "inbox_item.comment_id",
      "inbox_item.creation_date",
      "inbox_item.is_unread",
      "inbox_item.item_type",
      "inbox_item.link",
      "inbox_item.question_id",
      "inbox_item.site",
      "inbox_item.title",
      "info.answers_per_minute",
      "info.api_revision",
      "info.badges_per_minute",
      "info.new_active_users",
      "info.questions_per_minute",
      "info.total_accepted",
      "info.total_answers",
      "info.total_badges",
      "info.total_comments",
      "info.total_questions",
      "info.total_unanswered",
      "info.total_users",
      "info.total_votes",
      "migration_info.on_date",
      "migration_info.other_site",
      "migration_info.question_id",
      "network_activity.account_id",
      "network_activity.activity_type",
      "network_activity.api_site_parameter",
      "network_activity.badge_id",
      "network_activity.creation_date",
      "network_activity.description",
      "network_activity.link",
      "network_activity.post_id",
      "network_activity.score",
      "network_activity.tags",
      "network_activity.title",
      "network_post.post_id",
      "network_post.post_type",
      "network_post.score",
      "network_post.title",
      "network_user.account_id",
      "network_user.answer_count",
      "network_user.badge_counts",
      "network_user.creation_date",
      "network_user.last_access_date",
      "network_user.question_count",
      "network_user.reputation",
      "network_user.site_name",
      "network_user.site_url",
      "network_user.user_id",
      "notice.body",
      "notice.creation_date",
      "notice.owner_user_id",
      "notification.body",
      "notification.creation_date",
      "notification.is_unread",
      "notification.notification_type",
      "notification.post_id",
      "notification.site",
      "original_question.accepted_answer_id",
      "original_question.answer_count",
      "original_question.question_id",
      "original_question.title",
      "post.creation_date",
      "post.last_activity_date",
      "post.last_edit_date",
      "post.link",
      "post.owner",
      "post.post_id",
      "post.post_type",
      "post.score",
      "privilege.description",
      "privilege.reputation",
      "privilege.short_description",
      "question.accepted_answer_id",
      "question.answer_count",
      "question.bounty_amount",
      "question.bounty_closes_date",
      "question.closed_date",
      "question.closed_reason",
      "question.community_owned_date",
      "question.creation_date",
      "question.is_answered",
      "question.last_activity_date",
      "question.last_edit_date",
      "question.link",
      "question.locked_date",
      "question.migrated_from",
      "question.migrated_to",
      "question.owner",
      "question.protected_date",
      "question.question_id",
      "question.score",
      "question.tags",
      "question.title",
      "question.view_count",
      "question_timeline.comment_id",
      "question_timeline.creation_date",
      "question_timeline.down_vote_count",
      "question_timeline.owner",
      "question_timeline.post_id",
      "question_timeline.question_id",
      "question_timeline.revision_guid",
      "question_timeline.timeline_type",
      "question_timeline.up_vote_count",
      "question_timeline.user",
      "related_site.api_site_parameter",
      "related_site.name",
      "related_site.relation",
      "related_site.site_url",
      "reputation.on_date",
      "reputation.post_id",
      "reputation.post_type",
      "reputation.reputation_change",
      "reputation.user_id",
      "reputation.vote_type",
      "reputation_history.creation_date",
      "reputation_history.post_id",
      "reputation_history.reputation_change",
      "reputation_history.reputation_history_type",
      "reputation_history.user_id",
      "revision.comment",
      "revision.creation_date",
      "revision.is_rollback",
      "revision.last_tags",
      "revision.last_title",
      "revision.post_id",
      "revision.post_type",
      "revision.revision_guid",
      "revision.revision_number",
      "revision.revision_type",
      "revision.set_community_wiki",
      "revision.tags",
      "revision.title",
      "revision.user",
      "search_excerpt.answer_count",
      "search_excerpt.answer_id",
      "search_excerpt.body",
      "search_excerpt.creation_date",
      "search_excerpt.equivalent_tag_search",
      "search_excerpt.excerpt",
      "search_excerpt.has_accepted_answer",
      "search_excerpt.is_accepted",
      "search_excerpt.is_answered",
      "search_excerpt.item_type",
      "search_excerpt.last_activity_date",
      "search_excerpt.question_id",
      "search_excerpt.score",
      "search_excerpt.tags",
      "search_excerpt.title",
      "shallow_user.accept_rate",
      "shallow_user.display_name",
      "shallow_user.link",
      "shallow_user.profile_image",
      "shallow_user.reputation",
      "shallow_user.user_id",
      "shallow_user.user_type",
      "site.aliases",
      "site.api_site_parameter",
      "site.audience",
      "site.closed_beta_date",
      "site.favicon_url",
      "site.high_resolution_icon_url",
      "site.icon_url",
      "site.launch_date",
      "site.logo_url",
      "site.markdown_extensions",
      "site.name",
      "site.open_beta_date",
      "site.related_sites",
      "site.site_state",
      "site.site_type",
      "site.site_url",
      "site.styling",
      "site.twitter_account",
      "styling.link_color",
      "styling.tag_background_color",
      "styling.tag_foreground_color",
      "suggested_edit.approval_date",
      "suggested_edit.comment",
      "suggested_edit.creation_date",
      "suggested_edit.post_id",
      "suggested_edit.post_type",
      "suggested_edit.proposing_user",
      "suggested_edit.rejection_date",
      "suggested_edit.suggested_edit_id",
      "suggested_edit.tags",
      "suggested_edit.title",
      "tag.count",
      "tag.has_synonyms",
      "tag.is_moderator_only",
      "tag.is_required",
      "tag.name",
      "tag.user_id",
      "tag_score.post_count",
      "tag_score.score",
      "tag_score.user",
      "tag_synonym.applied_count",
      "tag_synonym.creation_date",
      "tag_synonym.from_tag",
      "tag_synonym.last_applied_date",
      "tag_synonym.to_tag",
      "tag_wiki.body_last_edit_date",
      "tag_wiki.excerpt",
      "tag_wiki.excerpt_last_edit_date",
      "tag_wiki.tag_name",
      "top_tag.answer_count",
      "top_tag.answer_score",
      "top_tag.question_count",
      "top_tag.question_score",
      "top_tag.tag_name",
      "top_tag.user_id",
      "user.accept_rate",
      "user.account_id",
      "user.age",
      "user.badge_counts",
      "user.creation_date",
      "user.display_name",
      "user.is_employee",
      "user.last_access_date",
      "user.last_modified_date",
      "user.link",
      "user.location",
      "user.profile_image",
      "user.reputation",
      "user.reputation_change_day",
      "user.reputation_change_month",
      "user.reputation_change_quarter",
      "user.reputation_change_week",
      "user.reputation_change_year",
      "user.timed_penalty_date",
      "user.user_id",
      "user.user_type",
      "user.website_url",
      "user_timeline.badge_id",
      "user_timeline.comment_id",
      "user_timeline.creation_date",
      "user_timeline.detail",
      "user_timeline.post_id",
      "user_timeline.post_type",
      "user_timeline.suggested_edit_id",
      "user_timeline.timeline_type",
      "user_timeline.title",
      "user_timeline.user_id",
      "write_permission.can_add",
      "write_permission.can_delete",
      "write_permission.can_edit",
      "write_permission.max_daily_actions",
      "write_permission.min_seconds_between_actions",
      "write_permission.object_type",
      "write_permission.user_id"
    ],
    "filter": "default",
    "filter_type": "safe"
  }
#+end_example
**** DONE [[http://api.stackexchange.com/docs/types/reputation][Reputation]]
#+begin_src emacs-lisp
  (defstruct stack-api/reputation
    "This type represents a change in reputation for a User.
  
  All methods that return this data will scrub it to a degree, to
  increase the difficulty of correlating reputation changes with
  down voting."
  
   link              ; string ; unchanged in unsafe filters
   on-date           ; date
   post-id           ; integer, refers to a post
   post-type         ; one of question, or answer
   reputation-change ; integer
   title             ; string
   user-id           ; integer, refers to a user
   vote-type)        ; one of 'accepts, 'up-votes, 'down-votes, 'bounties-offered, 'bounties-won, 'spam, or 'suggested-edits
#+end_src
*** Cache
In order to minimize the number of calls we make to the API, we set up
a number of cells in which to store data.

At the very top, we have a list of sites.
Each site is a pair where the first element is
  a collection of information about the site in general (as a =site= object).

- car :: meta-information about the site
- cdr :: list of questions

- sites :: stores information about all sites in general
- questions :: stores information about each site's questions as
               retrieved.

**** Sites data structure

**** Question data structure

**** Implementation

#+begin_src emacs-lisp :tangle "elisp/stack-api.el"
  (defvar stack-api/cache nil
    "A sparse cache of information for the sites on the Stack
  Exchange Network")
#+end_src

#+begin_src emacs-lisp :noweb yes :tangle "elisp/stack-api.el"
  ;; stack-api.el starts here
  
  ; Build on the shoulders of giants
  <<require-dependencies>>
  
  ; Declare caches
  <<declare-caches>>
  
  ; Define all structures
  <<define-structures>>
  
  ; Define functions for authentication
  <<authentication>>
  
  ; Define functions for read
  <<read-methods>>
  
  ; Define functions for write
  <<write-methods>>
  
  ;; stack-api.el ends here
#+end_src
*** Dependencies
:PROPERTIES:
:noweb-ref: require-dependencies
:END:
**** JSON
#+begin_src emacs-lisp
  (require 'json)
#+end_src
*** Authentication
https://api.stackexchange.com/docs/authentication
*** Elisp Copy
**** =/sites=

*** Finding out if a =site= is 'meta
#+begin_src emacs-lisp
(defun stack-api/site-is-meta (site)
(string= "meta-site" (assoc-default 'site-type site)))
#+end_src
